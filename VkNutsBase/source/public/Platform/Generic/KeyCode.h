#pragma once

// clang-format off
#include <NutsPCH.h>
// clang-format on

#include <GLFW/glfw3.h>
#include <Utilities/ConstexprMap.hpp>
#include <Utilities/Utilities.hpp>

namespace nuts {

    enum class KeyCode : std::int16_t {
        Unkown = GLFW_KEY_UNKNOWN,

        Space      = GLFW_KEY_SPACE,
        Apostrophe = GLFW_KEY_APOSTROPHE /* ' */,
        Comma      = GLFW_KEY_COMMA /* , */,
        Minus      = GLFW_KEY_MINUS /* - */,
        Period     = GLFW_KEY_PERIOD /* . */,
        Slash      = GLFW_KEY_SLASH /* / */,

        N0 = GLFW_KEY_0,
        N1 = GLFW_KEY_1,
        N2 = GLFW_KEY_2,
        N3 = GLFW_KEY_3,
        N4 = GLFW_KEY_4,
        N5 = GLFW_KEY_5,
        N6 = GLFW_KEY_6,
        N7 = GLFW_KEY_7,
        N8 = GLFW_KEY_8,
        N9 = GLFW_KEY_9,

        SemiColon = GLFW_KEY_SEMICOLON /* ; */,
        Equal     = GLFW_KEY_EQUAL /* = */,

        A = GLFW_KEY_A,
        B = GLFW_KEY_B,
        C = GLFW_KEY_C,
        D = GLFW_KEY_D,
        E = GLFW_KEY_E,
        F = GLFW_KEY_F,
        G = GLFW_KEY_G,
        H = GLFW_KEY_H,
        I = GLFW_KEY_I,
        J = GLFW_KEY_J,
        K = GLFW_KEY_K,
        L = GLFW_KEY_L,
        M = GLFW_KEY_M,
        N = GLFW_KEY_N,
        O = GLFW_KEY_O,
        P = GLFW_KEY_P,
        Q = GLFW_KEY_Q,
        R = GLFW_KEY_R,
        S = GLFW_KEY_S,
        T = GLFW_KEY_T,
        U = GLFW_KEY_U,
        V = GLFW_KEY_V,
        W = GLFW_KEY_W,
        X = GLFW_KEY_X,
        Y = GLFW_KEY_Y,
        Z = GLFW_KEY_Z,

        LeftBracket  = GLFW_KEY_LEFT_BRACKET /* [ */,
        BackSlash    = GLFW_KEY_BACKSLASH /* \ */,
        RightBracket = GLFW_KEY_RIGHT_BRACKET /* ] */,
        GraveAccent  = GLFW_KEY_GRAVE_ACCENT /* ` */,

        World1 = GLFW_KEY_WORLD_1 /* non-US #1 */,
        World2 = GLFW_KEY_WORLD_2 /* non-US #2 */,

        Escape    = GLFW_KEY_ESCAPE,
        Enter     = GLFW_KEY_ENTER,
        Tab       = GLFW_KEY_TAB,
        BackSpace = GLFW_KEY_BACKSPACE,
        Insert    = GLFW_KEY_INSERT,
        Delete    = GLFW_KEY_DELETE,

        Right = GLFW_KEY_RIGHT,
        Left  = GLFW_KEY_LEFT,
        Down  = GLFW_KEY_DOWN,
        Up    = GLFW_KEY_UP,

        PageUp   = GLFW_KEY_PAGE_UP,
        PageDown = GLFW_KEY_PAGE_DOWN,
        Home     = GLFW_KEY_HOME,
        End      = GLFW_KEY_END,

        CapsLock    = GLFW_KEY_CAPS_LOCK,
        ScrollLock  = GLFW_KEY_SCROLL_LOCK,
        NumLock     = GLFW_KEY_NUM_LOCK,
        PrintScreen = GLFW_KEY_PRINT_SCREEN,
        Pause       = GLFW_KEY_PAUSE,

        F1  = GLFW_KEY_F1,
        F2  = GLFW_KEY_F2,
        F3  = GLFW_KEY_F3,
        F4  = GLFW_KEY_F4,
        F5  = GLFW_KEY_F5,
        F6  = GLFW_KEY_F6,
        F7  = GLFW_KEY_F7,
        F8  = GLFW_KEY_F8,
        F9  = GLFW_KEY_F9,
        F10 = GLFW_KEY_F10,
        F11 = GLFW_KEY_F11,
        F12 = GLFW_KEY_F12,
        F13 = GLFW_KEY_F13,
        F14 = GLFW_KEY_F14,
        F15 = GLFW_KEY_F15,
        F16 = GLFW_KEY_F16,
        F17 = GLFW_KEY_F17,
        F18 = GLFW_KEY_F18,
        F19 = GLFW_KEY_F19,
        F20 = GLFW_KEY_F20,
        F21 = GLFW_KEY_F21,
        F22 = GLFW_KEY_F22,
        F23 = GLFW_KEY_F23,
        F24 = GLFW_KEY_F24,
        F25 = GLFW_KEY_F25,

        KP0        = GLFW_KEY_KP_0,
        KP1        = GLFW_KEY_KP_1,
        KP2        = GLFW_KEY_KP_2,
        KP3        = GLFW_KEY_KP_3,
        KP4        = GLFW_KEY_KP_4,
        KP5        = GLFW_KEY_KP_5,
        KP6        = GLFW_KEY_KP_6,
        KP7        = GLFW_KEY_KP_7,
        KP8        = GLFW_KEY_KP_8,
        KP9        = GLFW_KEY_KP_9,
        KPDecimal  = GLFW_KEY_KP_DECIMAL,
        KPDivide   = GLFW_KEY_KP_DIVIDE,
        KPMultiply = GLFW_KEY_KP_MULTIPLY,
        KPSubtract = GLFW_KEY_KP_SUBTRACT,
        KPAdd      = GLFW_KEY_KP_ADD,
        KPEnter    = GLFW_KEY_KP_ENTER,
        KPEqual    = GLFW_KEY_KP_EQUAL,
        LeftShift  = GLFW_KEY_LEFT_SHIFT,
        LeftCtrl   = GLFW_KEY_LEFT_CONTROL,
        LeftAlt    = GLFW_KEY_LEFT_ALT,
        LeftSuper  = GLFW_KEY_LEFT_SUPER,
        RightShift = GLFW_KEY_RIGHT_SHIFT,
        RightCtrl  = GLFW_KEY_RIGHT_CONTROL,
        RightAlt   = GLFW_KEY_RIGHT_ALT,
        RightSuper = GLFW_KEY_RIGHT_SUPER,
        Menu       = GLFW_KEY_MENU,

#if defined(NUTS_ENABLE_LOG)
        // Count tracker
        NUTS_ENUM_COUNT = 121,
#endif
    };

#if defined(NUTS_ENABLE_LOG)
    static constexpr ConstexprMap< KeyCode, const char*, enum_size_v< KeyCode > > KeyCodeToString { { {
        { KeyCode::Unkown, "Unknown" },
        { KeyCode::Space, "Space" },
        { KeyCode::Apostrophe, "Apostrophe" },
        { KeyCode::Comma, "Comma" },
        { KeyCode::Minus, "Minus" },
        { KeyCode::Period, "Period" },
        { KeyCode::Slash, "Slash" },
        { KeyCode::N0, "N0" },
        { KeyCode::N1, "N1" },
        { KeyCode::N2, "N2" },
        { KeyCode::N3, "N3" },
        { KeyCode::N4, "N4" },
        { KeyCode::N5, "N5" },
        { KeyCode::N6, "N6" },
        { KeyCode::N7, "N7" },
        { KeyCode::N8, "N8" },
        { KeyCode::N9, "N9" },
        { KeyCode::SemiColon, "SemiColon" },
        { KeyCode::Equal, "Equal" },
        { KeyCode::A, "A" },
        { KeyCode::B, "B" },
        { KeyCode::C, "C" },
        { KeyCode::D, "D" },
        { KeyCode::E, "E" },
        { KeyCode::F, "F" },
        { KeyCode::G, "G" },
        { KeyCode::H, "H" },
        { KeyCode::I, "I" },
        { KeyCode::J, "J" },
        { KeyCode::K, "K" },
        { KeyCode::L, "L" },
        { KeyCode::M, "M" },
        { KeyCode::N, "N" },
        { KeyCode::O, "O" },
        { KeyCode::P, "P" },
        { KeyCode::Q, "Q" },
        { KeyCode::R, "R" },
        { KeyCode::S, "S" },
        { KeyCode::T, "T" },
        { KeyCode::U, "U" },
        { KeyCode::V, "V" },
        { KeyCode::W, "W" },
        { KeyCode::X, "X" },
        { KeyCode::Y, "Y" },
        { KeyCode::Z, "Z" },
        { KeyCode::LeftBracket, "LeftBracket" },
        { KeyCode::BackSlash, "BackSlash" },
        { KeyCode::RightBracket, "RightBracket" },
        { KeyCode::GraveAccent, "GraveAccent" },
        { KeyCode::World1, "World1" },
        { KeyCode::World2, "World2" },
        { KeyCode::Escape, "Escape" },
        { KeyCode::Enter, "Enter" },
        { KeyCode::Tab, "Tab" },
        { KeyCode::BackSpace, "BackSpace" },
        { KeyCode::Insert, "Insert" },
        { KeyCode::Delete, "Delete" },
        { KeyCode::Right, "Right" },
        { KeyCode::Left, "Left" },
        { KeyCode::Down, "Down" },
        { KeyCode::Up, "Up" },
        { KeyCode::PageUp, "PageUp" },
        { KeyCode::PageDown, "PageDown" },
        { KeyCode::Home, "Home" },
        { KeyCode::End, "End" },
        { KeyCode::CapsLock, "CapsLock" },
        { KeyCode::ScrollLock, "ScrollLock" },
        { KeyCode::NumLock, "NumLock" },
        { KeyCode::PrintScreen, "PrintScreen" },
        { KeyCode::Pause, "Pause" },
        { KeyCode::F1, "F1" },
        { KeyCode::F2, "F2" },
        { KeyCode::F3, "F3" },
        { KeyCode::F4, "F4" },
        { KeyCode::F5, "F5" },
        { KeyCode::F6, "F6" },
        { KeyCode::F7, "F7" },
        { KeyCode::F8, "F8" },
        { KeyCode::F9, "F9" },
        { KeyCode::F10, "F10" },
        { KeyCode::F11, "F11" },
        { KeyCode::F12, "F12" },
        { KeyCode::F13, "F13" },
        { KeyCode::F14, "F14" },
        { KeyCode::F15, "F15" },
        { KeyCode::F16, "F16" },
        { KeyCode::F17, "F17" },
        { KeyCode::F18, "F18" },
        { KeyCode::F19, "F19" },
        { KeyCode::F20, "F20" },
        { KeyCode::F21, "F21" },
        { KeyCode::F22, "F22" },
        { KeyCode::F23, "F23" },
        { KeyCode::F24, "F24" },
        { KeyCode::F25, "F25" },
        { KeyCode::KP0, "KP0" },
        { KeyCode::KP1, "KP1" },
        { KeyCode::KP2, "KP2" },
        { KeyCode::KP3, "KP3" },
        { KeyCode::KP4, "KP4" },
        { KeyCode::KP5, "KP5" },
        { KeyCode::KP6, "KP6" },
        { KeyCode::KP7, "KP7" },
        { KeyCode::KP8, "KP8" },
        { KeyCode::KP9, "KP9" },
        { KeyCode::KPDecimal, "KPDecimal" },
        { KeyCode::KPDivide, "KPDivide" },
        { KeyCode::KPMultiply, "KPMultiply" },
        { KeyCode::KPSubtract, "KPSubtract" },
        { KeyCode::KPAdd, "KPAdd" },
        { KeyCode::KPEnter, "KPEnter" },
        { KeyCode::KPEqual, "KPEqual" },
        { KeyCode::LeftShift, "LeftShift" },
        { KeyCode::LeftCtrl, "LeftCtrl" },
        { KeyCode::LeftAlt, "LeftAlt" },
        { KeyCode::LeftSuper, "LeftSuper" },
        { KeyCode::RightShift, "RightShift" },
        { KeyCode::RightCtrl, "RightCtrl" },
        { KeyCode::RightAlt, "RightAlt" },
        { KeyCode::RightSuper, "RightSuper" },
        { KeyCode::Menu, "Menu" },
    } } };
#endif

} // namespace nuts

#if defined(NUTS_ENABLE_LOG)
inline std::ostream& operator<<(std::ostream& os, const nuts::KeyCode& keyCode) {
    os << nuts::KeyCodeToString.at(keyCode);
    return os;
}
#endif
